<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	
	<!-- 
		配置Bean
		class:bean的全类名, 通过反射的方式在IOC容器中创建Bean, 所以要求Bean中必须 有无参数的构造函数
		id:标识容器中的bean, id唯一
	-->
	<bean id="helloWorld" class="spring.beans.HelloWorld">
		<property name="name" value="Daisy"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="Shanghai" index="1"></constructor-arg>
		<constructor-arg value="300000" index="2"></constructor-arg>
	</bean>
	
	<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型, 以区分重载的构造器-->
	<bean id="car2" class="spring.beans.Car">
		<constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值包含特殊字符可以使用<![CDATA[]]包裹起来 -->
		<!-- 属性值也可以使用value子节点进行配置-->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<Beijing^>]]></value>
		</constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<!-- 可以使用properties的ref属性建立bean之间的引用关系 -->
	<bean id="person" class="spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="60"></property>
		<!-- <property name="car" ref="car2"></property> -->
		<!-- <property name="car">
			<ref bean="car2"></ref>
		</property> -->
		<!-- 内部bean,不能被外部引用, 只能在内部使用 -->
		<property name="car">
			<bean class="spring.beans.Car">
			<constructor-arg value="Benz" index="0"></constructor-arg>
			<constructor-arg value="Chengdu" index="1"></constructor-arg>
			<constructor-arg value="500000" index="2"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	<bean id="person2" class="spring.beans.Person">
		<constructor-arg value="Danny"></constructor-arg>
		<constructor-arg value="32"></constructor-arg>
		<constructor-arg ref="car"></constructor-arg>
		<!-- 测试赋值null -->
		<!-- <constructor-arg><null/></constructor-arg> -->
		<!-- 为级联属性赋值 . 注意:属性需要先初始化后才可以为级联属性赋值, 否则会有异常, 和Struts2不同-->
		<property name="car.price" value="250000.0"></property>
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="spring.beans.collections.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<!-- 使用list节点为list属性赋值 -->
			<list>
			 	<ref bean="car"/>
			 	<ref bean="car2"></ref>
			 	<bean class="spring.beans.Car">
				<constructor-arg value="Benz" index="0"></constructor-arg>
				<constructor-arg value="Chengdu" index="1"></constructor-arg>
				<constructor-arg value="500000" index="2"></constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map属性值 -->
	<bean id="newPerson" class="spring.beans.collections.NewPerson">
		<property name="name" value="Rachel"></property>
		<property name="age" value="29"></property>
		<property name="cars">
			<!-- 使用map节点及map的entry子节点配置Map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties属性 -->
	<bean id="dataSource" class="spring.beans.collections.DataSource">
		<property name="properties">
			<!-- 使用props和prop子节点来为properties赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean, 以供多个beans进行引用,需要导入util命名空间-->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="spring.beans.collections.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p命名空间为bean的属性赋值, 需要先导入p命名空间. 相对于传统的配置方式更加的简洁 -->
	<bean id="person5" class="spring.beans.collections.Person" p:age="30" p:name="Ross" p:cars-ref="cars"></bean>
	
</beans>
